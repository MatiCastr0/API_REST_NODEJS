No tests found related to files changed since last commit.
onRunStart: numTotalTestSuites: 0
onRunComplete
Test results written to: ../../../../../tmp/jest_runner_api_rest__mongo__express__node__1000.json

onRunStart: numTotalTestSuites: 3
FAIL test/01_auth.test.js (5.897 s)
  ● esto deberia de retornar 404

    expect(received).toEqual(expected) // deep equality

    Expected: 404
    Received: 200

      13 |     .send(testAuthLogin);
      14 |
    > 15 |   expect(response.statusCode).toEqual(404);
         |                               ^
      16 | });
      17 |
      18 | test("esto deberia de retornar 201", async () => {

      at Object.toEqual (test/01_auth.test.js:15:31)

  ● esto deberia de retornar 201

    expect(received).toEqual(expected) // deep equality

    Expected: 201
    Received: 200

      21 |     .send(testAuthRegister);
      22 |
    > 23 |   expect(response.statusCode).toEqual(201);
         |                               ^
      24 |   expect(response.body).toHaveProperty("data");
      25 |   expect(response.body).toHaveProperty("data.token");
      26 |   expect(response.body).toHaveProperty("data.user");

      at Object.toEqual (test/01_auth.test.js:23:31)

  ● esto deberia de retornar password no valido 401

    expect(received).toEqual(expected) // deep equality

    Expected: 401
    Received: 200

      33 |     .send(newTestAuthLogin);
      34 |
    > 35 |   expect(response.statusCode).toEqual(401);
         |                               ^
      36 | });
      37 |
      38 | test("esto deberia de retornar 200 login exitoso", async () => {

      at Object.toEqual (test/01_auth.test.js:35:31)

FAIL test/03_tracks.test.js
  ● deberia registra un item

    expect(received).toEqual(expected) // deep equality

    Expected: 201
    Received: 200

      31 |     .send(dataTracksNew);
      32 |   const { body } = res;
    > 33 |   expect(res.statusCode).toEqual(201);
         |                          ^
      34 |   expect(body).toHaveProperty("data");
      35 |   expect(body).toHaveProperty("data.name");
      36 |   expect(body).toHaveProperty("data.artist");

      at Object.toEqual (test/03_tracks.test.js:33:26)

  ● should create a return all

    expect(received).toHaveProperty(path)

    Expected path: "data"
    Received path: []

    Received value: {}

      46 |   const { data } = body;
      47 |   //   idFile = data.docs[0]._id;
    > 48 |   expect(body).toHaveProperty("data");
         |                ^
      49 | });
      50 |
      51 | test("debe retornar todo el detalle del item", async () => {

      at Object.toHaveProperty (test/03_tracks.test.js:48:16)

  ● debe retornar todo el detalle del item

    expect(received).toHaveProperty(path)

    Expected path: "data"
    Received path: []

    Received value: {}

      57 |   const { body } = res;
      58 |   expect(res.statusCode).toEqual(200);
    > 59 |   expect(body).toHaveProperty("data");
         |                ^
      60 | });
      61 |
      62 | test("debe eliminar el item", async () => {

      at Object.toHaveProperty (test/03_tracks.test.js:59:16)

  ● debe eliminar el item

    expect(received).toHaveProperty(path)

    Expected path: "data"
    Received path: []

    Received value: {}

      68 |   const { body } = res;
      69 |   expect(res.statusCode).toEqual(200);
    > 70 |   expect(body).toHaveProperty("data");
         |                ^
      71 |   expect(body).toHaveProperty("data.deleted", 1);
      72 | });
      73 |

      at Object.toHaveProperty (test/03_tracks.test.js:70:16)

FAIL test/02_storage.test.js
  ● should uplaod file

    expect(received).toEqual(expected) // deep equality

    Expected: 201
    Received: 200

      21 |     .attach("myfile", filePath);
      22 |   const { body } = res;
    > 23 |   expect(res.statusCode).toEqual(201);
         |                          ^
      24 |   expect(body).toHaveProperty("data");
      25 |   expect(body).toHaveProperty("data.url");
      26 | });

      at Object.toEqual (test/02_storage.test.js:23:26)

  ● should create a return all

    expect(received).toHaveProperty(path)

    Expected path: "data"
    Received path: []

    Received value: {}

      33 |   expect(res.statusCode).toEqual(200);
      34 |   const { data } = body;
    > 35 |   expect(body).toHaveProperty("data");
         |                ^
      36 | });
      37 |
      38 | test("debe retornar todo el detalle del item", async () => {

      at Object.toHaveProperty (test/02_storage.test.js:35:16)

  ● debe retornar todo el detalle del item

    TypeError: Cannot destructure property '_id' of '(intermediate value)' as it is null.

      37 |
      38 | test("debe retornar todo el detalle del item", async () => {
    > 39 |   const { _id } = await storageModel.findOne();
         |           ^
      40 |   id = _id.toString();
      41 |
      42 |   const res = await request(app)

      at Object._id (test/02_storage.test.js:39:11)

  ● debe eliminar el item

    TypeError: Cannot destructure property '_id' of '(intermediate value)' as it is null.

      49 |
      50 | test("debe eliminar el item", async () => {
    > 51 |   const { _id } = await storageModel.findOne();
         |           ^
      52 |   id = _id.toString();
      53 |
      54 |   const res = await request(app)

      at Object._id (test/02_storage.test.js:51:11)

onRunComplete
Test Suites: 3 failed, 3 total
Tests:       11 failed, 1 passed, 12 total
Snapshots:   0 total
Time:        12.468 s, estimated 13 s
